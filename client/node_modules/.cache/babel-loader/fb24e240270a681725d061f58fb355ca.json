{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE } from '../actions/types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert'; //Load User\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post('/api/users', body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; //Sign in\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config); //?- get body\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //Logout / Clear everithing\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["C:/Users/adam3/OneDrive/Bureau/BattleMern/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_PROFILE","setAuthToken","setAlert","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_PROFILE} from '../actions/types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert';\n\n\n//Load User\nexport const loadUser = () => async dispatch => {\n    if (localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n    try {\n        const res = await axios.get('api/auth');\n        dispatch({ type: USER_LOADED, payload: res.data });\n    } catch (err) {\n        dispatch({ type: AUTH_ERROR });\n    }\n};\n//Register User\nexport const register = ({ name, email, password }) => async (dispatch) => {\n    const config = {\n        headers: { 'Content-Type': 'application/json' }\n    }\n    const body = JSON.stringify({ name, email, password });\n    try {\n        const res = await axios.post('/api/users', body, config);\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        });\n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n            type: REGISTER_FAIL\n        });\n    }\n};\n\n//Sign in\nexport const login = (email, password) => async (dispatch) => {\n    const config = {\n        headers: { 'Content-Type': 'application/json' }\n    }\n    const body = JSON.stringify({ email, password });\n    try {\n        const res = await axios.post('/api/auth', body, config);//?- get body\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n        dispatch(loadUser());\n    } catch (err) {\n        const errors = err.response.data.errors;\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n            type: LOGIN_FAIL\n        });\n    }\n};\n\n//Logout / Clear everithing\nexport const logout = () => dispatch => {\n    dispatch({ type: CLEAR_PROFILE });\n    dispatch({ type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}